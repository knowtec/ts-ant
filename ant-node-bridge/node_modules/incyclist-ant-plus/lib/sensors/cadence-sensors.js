"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CadenceSensorState = void 0;
const messages_1 = require("../messages");
const base_sensor_1 = __importStar(require("./base-sensor"));
const consts_1 = require("../consts");
class CadenceSensorState extends base_sensor_1.SensorState {
    constructor() {
        super(...arguments);
        this._UpdateTime = Date.now();
        this.CalculatedCadence = 0;
        this.Motion = undefined;
    }
}
exports.CadenceSensorState = CadenceSensorState;
const DEVICE_TYPE = 0x7a;
const PROFILE = 'CAD';
const PERIOD = 8102;
const TOGGLE_MASK = 0x80;
class CadenceSensor extends base_sensor_1.default {
    constructor() {
        super(...arguments);
        this.states = {};
    }
    getDeviceType() {
        return DEVICE_TYPE;
    }
    getProfile() {
        return PROFILE;
    }
    getChannelConfiguration() {
        return { type: 'receive', transmissionType: 0, timeout: consts_1.Constants.TIMEOUT_NEVER, period: PERIOD, frequency: 57 };
    }
    onEvent(data) {
        return;
    }
    onMessage(data) {
        const channel = this.getChannel();
        if (!channel)
            return;
        const channelNo = channel.getChannelNo();
        const deviceID = data.readUInt16LE(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 1);
        const deviceType = data.readUInt8(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 3);
        if (data.readUInt8(messages_1.Messages.BUFFER_INDEX_CHANNEL_NUM) !== channelNo || deviceType !== this.getDeviceType()) {
            return;
        }
        if (!this.states[deviceID]) {
            this.states[deviceID] = new CadenceSensorState(deviceID);
            this.states[deviceID].Channel = channelNo;
        }
        if (data.readUInt8(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN) & 0x40) {
            if (data.readUInt8(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 5) === 0x20) {
                this.states[deviceID].Rssi = data.readInt8(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 6);
                this.states[deviceID].Threshold = data.readInt8(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 7);
            }
        }
        switch (data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_TYPE)) {
            case consts_1.Constants.MESSAGE_CHANNEL_BROADCAST_DATA:
            case consts_1.Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA:
            case consts_1.Constants.MESSAGE_CHANNEL_BURST_DATA:
                updateState(this.states[deviceID], data);
                if (this.deviceID === 0 || this.deviceID === deviceID) {
                    channel.onDeviceData(this.getProfile(), deviceID, this.states[deviceID]);
                }
                break;
            default:
                break;
        }
    }
}
exports.default = CadenceSensor;
function updateState(state, data) {
    state._RawData = data;
    const page = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA);
    switch (page & ~TOGGLE_MASK) {
        case 1: {
            state.OperatingTime = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 1);
            state.OperatingTime |= data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 2) << 8;
            state.OperatingTime |= data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 3) << 16;
            state.OperatingTime *= 2;
            break;
        }
        case 2: {
            state.ManId = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 1);
            state.SerialNumber = state.DeviceID;
            state.SerialNumber |= data.readUInt16LE(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 2) << 16;
            state.SerialNumber >>>= 0;
            break;
        }
        case 3: {
            state.HwVersion = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 1);
            state.SwVersion = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 2);
            state.ModelNum = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 3);
            break;
        }
        case 4: {
            const batteryFrac = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 2);
            const batteryStatus = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 3);
            state.BatteryVoltage = (batteryStatus & 0x0f) + batteryFrac / 256;
            const batteryFlags = (batteryStatus & 0x70) >>> 4;
            switch (batteryFlags) {
                case 1:
                    state.BatteryStatus = 'New';
                    break;
                case 2:
                    state.BatteryStatus = 'Good';
                    break;
                case 3:
                    state.BatteryStatus = 'Ok';
                    break;
                case 4:
                    state.BatteryStatus = 'Low';
                    break;
                case 5:
                    state.BatteryStatus = 'Critical';
                    break;
                default:
                    state.BatteryVoltage = undefined;
                    state.BatteryStatus = 'Invalid';
                    break;
            }
            break;
        }
        case 5: {
            state.Motion = (data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 1) & 0x01) === 0x01;
            break;
        }
        default:
            break;
    }
    const oldUpdateTime = state._UpdateTime;
    const oldCadenceTime = state.CadenceEventTime;
    const oldCadenceCount = state.CumulativeCadenceRevolutionCount;
    const oldCalculatedCadence = state.CalculatedCadence;
    let delay = 125000 / oldCalculatedCadence;
    const eventTime = Date.now();
    let cadenceTime = data.readUInt16LE(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 4);
    const cadenceCount = data.readUInt16LE(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 6);
    if ((cadenceTime === oldCadenceTime) && (eventTime - oldUpdateTime >= delay)) {
        state.CalculatedCadence = 0;
    }
    else if (state.Motion !== undefined && !state.Motion) {
        state.CalculatedCadence = 0;
    }
    else {
        state._UpdateTime = eventTime;
        state.CadenceEventTime = cadenceTime;
        state.CumulativeCadenceRevolutionCount = cadenceCount;
        if (oldCadenceTime > cadenceTime) {
            cadenceTime += 1024 * 64;
        }
        const cadence = (60 * (cadenceCount - oldCadenceCount) * 1024) / (cadenceTime - oldCadenceTime);
        if (!isNaN(cadence)) {
            state.CalculatedCadence = cadence;
        }
    }
}
