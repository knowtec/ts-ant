import { ChannelConfiguration, ISensor, Profile } from '../types';
import Sensor, { SensorState } from './base-sensor';
export declare class BicyclePowerSensorState extends SensorState {
    Cadence?: number;
    CalculatedCadence?: number;
    Power?: number;
    CalculatedPower?: number;
    CalculatedTorque?: number;
    Offset: number;
    _0x10_EventCount?: number;
    _0x10_UpdateTime?: number;
    PedalPower?: number;
    RightPedalPower?: number;
    LeftPedalPower?: number;
    AccumulatedPower?: number;
    _0x12_EventCount?: number;
    _0x12_UpdateTime?: number;
    CrankTicks?: number;
    AccumulatedCrankPeriod?: number;
    AccumulatedTorque?: number;
    _0x20_EventCount?: number;
    _0x20_EventRepeat?: number;
    Slope?: number;
    TimeStamp?: number;
    CrankTicksStamp?: number;
    TorqueTicksStamp?: number;
}
export default class BicyclePowerSensor extends Sensor implements ISensor {
    private states;
    getDeviceType(): number;
    getProfile(): Profile;
    getDeviceID(): number;
    getChannelConfiguration(): ChannelConfiguration;
    onEvent(data: Buffer): void;
    onMessage(data: Buffer): void;
}
