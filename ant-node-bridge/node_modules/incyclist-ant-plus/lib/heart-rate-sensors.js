"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeartRateScanner = exports.HeartRateSensor = void 0;
const Ant = require("./ant");
const consts_1 = require("./consts");
const messages_1 = require("./messages");
class HeartRateSensorState {
    constructor(deviceId) {
        this.DeviceID = deviceId;
    }
}
class HeartRateScannerState extends HeartRateSensorState {
}
var PageState;
(function (PageState) {
    PageState[PageState["INIT_PAGE"] = 0] = "INIT_PAGE";
    PageState[PageState["STD_PAGE"] = 1] = "STD_PAGE";
    PageState[PageState["EXT_PAGE"] = 2] = "EXT_PAGE";
})(PageState || (PageState = {}));
class HeartRateSensor extends Ant.AntPlusSensor {
    constructor(stick) {
        super(stick);
        this.page = {
            oldPage: -1,
            pageState: PageState.INIT_PAGE,
        };
        this.decodeDataCbk = this.decodeData.bind(this);
    }
    attach(channel, deviceID) {
        const _super = Object.create(null, {
            attach: { get: () => super.attach }
        });
        return __awaiter(this, void 0, void 0, function* () {
            _super.attach.call(this, channel, 'receive', deviceID, HeartRateSensor.deviceType, 0, 255, 8070);
            this.state = new HeartRateSensorState(deviceID);
        });
    }
    decodeData(data) {
        if (data.readUInt8(messages_1.Messages.BUFFER_INDEX_CHANNEL_NUM) !== this.channel) {
            return;
        }
        switch (data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_TYPE)) {
            case consts_1.Constants.MESSAGE_CHANNEL_BROADCAST_DATA:
            case consts_1.Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA:
            case consts_1.Constants.MESSAGE_CHANNEL_BURST_DATA:
                if (this.deviceID === 0) {
                    this.write(messages_1.Messages.requestMessage(this.channel, consts_1.Constants.MESSAGE_CHANNEL_ID));
                }
                updateState(this, this.state, this.page, data);
                break;
            case consts_1.Constants.MESSAGE_CHANNEL_ID:
                this.deviceID = data.readUInt16LE(messages_1.Messages.BUFFER_INDEX_MSG_DATA);
                this.transmissionType = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 3);
                this.state.DeviceID = this.deviceID;
                break;
            default:
                break;
        }
    }
}
exports.HeartRateSensor = HeartRateSensor;
HeartRateSensor.deviceType = 120;
class HeartRateScanner extends Ant.AntPlusScanner {
    constructor(stick) {
        super(stick);
        this.states = {};
        this.pages = {};
        this.decodeDataCbk = this.decodeData.bind(this);
    }
    scan() {
        const _super = Object.create(null, {
            scan: { get: () => super.scan }
        });
        return __awaiter(this, void 0, void 0, function* () {
            _super.scan.call(this, 'receive');
        });
    }
    decodeData(data) {
        if (data.length <= (messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 3) || !(data.readUInt8(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN) & 0x80)) {
            console.log('wrong message format', data.toString('hex'));
            return;
        }
        const deviceId = data.readUInt16LE(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 1);
        const deviceType = data.readUInt8(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 3);
        if (deviceType !== HeartRateScanner.deviceType) {
            return;
        }
        if (!this.states[deviceId]) {
            this.states[deviceId] = new HeartRateScannerState(deviceId);
        }
        if (!this.pages[deviceId]) {
            this.pages[deviceId] = { oldPage: -1, pageState: PageState.INIT_PAGE };
        }
        if (data.readUInt8(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN) & 0x40) {
            if (data.readUInt8(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 5) === 0x20) {
                this.states[deviceId].Rssi = data.readInt8(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 6);
                this.states[deviceId].Threshold = data.readInt8(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 7);
            }
        }
        switch (data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_TYPE)) {
            case consts_1.Constants.MESSAGE_CHANNEL_BROADCAST_DATA:
            case consts_1.Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA:
            case consts_1.Constants.MESSAGE_CHANNEL_BURST_DATA:
                updateState(this, this.states[deviceId], this.pages[deviceId], data);
                break;
            default:
                break;
        }
    }
}
exports.HeartRateScanner = HeartRateScanner;
HeartRateScanner.deviceType = 120;
const TOGGLE_MASK = 0x80;
function updateState(sensor, state, page, data) {
    const pageNum = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA);
    if (page.pageState === PageState.INIT_PAGE) {
        page.pageState = PageState.STD_PAGE;
    }
    else if ((pageNum !== page.oldPage) || (page.pageState === PageState.EXT_PAGE)) {
        page.pageState = PageState.EXT_PAGE;
        switch (pageNum & ~TOGGLE_MASK) {
            case 1:
                state.OperatingTime = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 1);
                state.OperatingTime |= data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 2) << 8;
                state.OperatingTime |= data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 3) << 16;
                state.OperatingTime *= 2;
                break;
            case 2:
                state.ManId = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 1);
                state.SerialNumber = state.DeviceID;
                state.SerialNumber |= data.readUInt16LE(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 2) << 16;
                state.SerialNumber >>>= 0;
                break;
            case 3:
                state.HwVersion = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 1);
                state.SwVersion = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 2);
                state.ModelNum = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 3);
                break;
            case 4:
                state.PreviousBeat = data.readUInt16LE(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 2);
                break;
            case 5:
                state.IntervalAverage = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 1);
                state.IntervalMax = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 2);
                state.SessionAverage = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 3);
                break;
            case 6:
                state.SupportedFeatures = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 2);
                state.EnabledFeatures = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 3);
                break;
            case 7: {
                const batteryLevel = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 1);
                const batteryFrac = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 2);
                const batteryStatus = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 3);
                if (batteryLevel !== 0xFF) {
                    state.BatteryLevel = batteryLevel;
                }
                state.BatteryVoltage = (batteryStatus & 0x0F) + (batteryFrac / 256);
                const batteryFlags = (batteryStatus & 0x70) >>> 4;
                switch (batteryFlags) {
                    case 1:
                        state.BatteryStatus = 'New';
                        break;
                    case 2:
                        state.BatteryStatus = 'Good';
                        break;
                    case 3:
                        state.BatteryStatus = 'Ok';
                        break;
                    case 4:
                        state.BatteryStatus = 'Low';
                        break;
                    case 5:
                        state.BatteryStatus = 'Critical';
                        break;
                    default:
                        state.BatteryVoltage = undefined;
                        state.BatteryStatus = 'Invalid';
                        break;
                }
                break;
            }
            default:
                break;
        }
    }
    DecodeDefaultHRM(state, data.slice(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 4));
    page.oldPage = pageNum;
    sensor.emit('hbdata', state);
    sensor.emit('hbData', state);
}
function DecodeDefaultHRM(state, pucPayload) {
    state.BeatTime = pucPayload.readUInt16LE(0);
    state.BeatCount = pucPayload.readUInt8(2);
    state.ComputedHeartRate = pucPayload.readUInt8(3);
}
