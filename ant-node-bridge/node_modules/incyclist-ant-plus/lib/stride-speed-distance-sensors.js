"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StrideSpeedDistanceScanner = exports.StrideSpeedDistanceSensor = void 0;
const Ant = require("./ant");
const consts_1 = require("./consts");
const messages_1 = require("./messages");
class StrideSpeedDistanceSensorState {
    constructor(deviceId) {
        this.DeviceID = deviceId;
    }
}
class StrideSpeedDistanceScanState extends StrideSpeedDistanceSensorState {
}
var PageState;
(function (PageState) {
    PageState[PageState["INIT_PAGE"] = 0] = "INIT_PAGE";
    PageState[PageState["STD_PAGE"] = 1] = "STD_PAGE";
    PageState[PageState["EXT_PAGE"] = 2] = "EXT_PAGE";
})(PageState || (PageState = {}));
class StrideSpeedDistanceSensor extends Ant.AntPlusSensor {
    constructor(stick) {
        super(stick);
        this.decodeDataCbk = this.decodeData.bind(this);
    }
    attach(channel, deviceID) {
        const _super = Object.create(null, {
            attach: { get: () => super.attach }
        });
        return __awaiter(this, void 0, void 0, function* () {
            _super.attach.call(this, channel, 'receive', deviceID, StrideSpeedDistanceSensor.deviceType, 0, 255, 8134);
            this.state = new StrideSpeedDistanceSensorState(deviceID);
        });
    }
    decodeData(data) {
        if (data.readUInt8(messages_1.Messages.BUFFER_INDEX_CHANNEL_NUM) !== this.channel) {
            return;
        }
        switch (data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_TYPE)) {
            case consts_1.Constants.MESSAGE_CHANNEL_BROADCAST_DATA:
            case consts_1.Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA:
            case consts_1.Constants.MESSAGE_CHANNEL_BURST_DATA:
                if (this.deviceID === 0) {
                    this.write(messages_1.Messages.requestMessage(this.channel, consts_1.Constants.MESSAGE_CHANNEL_ID));
                }
                updateState(this, this.state, data);
                break;
            case consts_1.Constants.MESSAGE_CHANNEL_ID:
                this.deviceID = data.readUInt16LE(messages_1.Messages.BUFFER_INDEX_MSG_DATA);
                this.transmissionType = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 3);
                this.state.DeviceID = this.deviceID;
                break;
            default:
                break;
        }
    }
}
exports.StrideSpeedDistanceSensor = StrideSpeedDistanceSensor;
StrideSpeedDistanceSensor.deviceType = 124;
class StrideSpeedDistanceScanner extends Ant.AntPlusScanner {
    constructor(stick) {
        super(stick);
        this.states = {};
        this.decodeDataCbk = this.decodeData.bind(this);
    }
    scan() {
        const _super = Object.create(null, {
            scan: { get: () => super.scan }
        });
        return __awaiter(this, void 0, void 0, function* () {
            _super.scan.call(this, 'receive');
        });
    }
    decodeData(data) {
        if (data.length <= (messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 3) || !(data.readUInt8(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN) & 0x80)) {
            console.log('wrong message format', data.toString('hex'));
            return;
        }
        const deviceId = data.readUInt16LE(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 1);
        const deviceType = data.readUInt8(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 3);
        if (deviceType !== StrideSpeedDistanceScanner.deviceType) {
            return;
        }
        if (!this.states[deviceId]) {
            this.states[deviceId] = new StrideSpeedDistanceScanState(deviceId);
        }
        if (data.readUInt8(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN) & 0x40) {
            if (data.readUInt8(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 5) === 0x20) {
                this.states[deviceId].Rssi = data.readInt8(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 6);
                this.states[deviceId].Threshold = data.readInt8(messages_1.Messages.BUFFER_INDEX_EXT_MSG_BEGIN + 7);
            }
        }
        switch (data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_TYPE)) {
            case consts_1.Constants.MESSAGE_CHANNEL_BROADCAST_DATA:
            case consts_1.Constants.MESSAGE_CHANNEL_ACKNOWLEDGED_DATA:
            case consts_1.Constants.MESSAGE_CHANNEL_BURST_DATA:
                updateState(this, this.states[deviceId], data);
                break;
            default:
                break;
        }
    }
}
exports.StrideSpeedDistanceScanner = StrideSpeedDistanceScanner;
StrideSpeedDistanceScanner.deviceType = 124;
function updateState(sensor, state, data) {
    const page = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA);
    if (page === 1) {
        state.TimeFractional = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 1);
        state.TimeInteger = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 2);
        state.DistanceInteger = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 3);
        state.DistanceFractional = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 4) >>> 4;
        state.SpeedInteger = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 4) & 0x0F;
        state.SpeedFractional = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 5);
        state.StrideCount = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 6);
        state.UpdateLatency = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 7);
    }
    else if (page >= 2 && page <= 15) {
        state.CadenceInteger = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 3);
        state.CadenceFractional = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 4) >>> 4;
        state.SpeedInteger = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 4) & 0x0F;
        state.SpeedFractional = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 5);
        state.Status = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 7);
        switch (page) {
            case 3:
                state.Calories = data.readUInt8(messages_1.Messages.BUFFER_INDEX_MSG_DATA + 6);
                break;
            default:
                break;
        }
    }
    sensor.emit('ssddata', state);
    sensor.emit('ssdData', state);
}
